////////////////////////////////////////////////////////////////////////////////
//
//  ACTSONE COMPANY
//  Copyright 2012 Actsone 
//  All Rights Reserved.
//
//	This program is free software: you can redistribute it and/or modify
//	it under the terms of the GNU General Public License as published by
//	the Free Software Foundation, either version 3 of the License, or
//	(at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////////////////////////
package kr.co.actsone.itemRenderers
{
	import flash.display.DisplayObject;
	import flash.geom.Rectangle;
	
	import kr.co.actsone.common.ColumnType;
	import kr.co.actsone.common.Global;
	import kr.co.actsone.controls.advancedDataGridClasses.ExAdvancedDataGridColumn;
	import kr.co.actsone.summarybar.SummaryBar;
	import kr.co.actsone.summarybar.SummaryBarConstant;
	import kr.co.actsone.summarybar.SummaryBarStyle;
	
	import mx.core.IUITextField;
	import mx.core.UITextField;
	
	public class SubTotalRenderer extends ExUIComponent
	{
		protected var label:IUITextField;
		
		public function SubTotalRenderer()
		{
			super();
			tabEnabled = false;
			this.setStyle('verticalAlign','middle');
		}
		
		override protected function createChildren():void
		{
			super.createChildren();
			
			createLabel(-1);
		}
		
		protected function createLabel(childIndex:int):void
		{
			if (!label)
			{
				label = IUITextField(createInFontContext(UITextField));
				label.styleName = this;
				
				if (childIndex == -1)
					addChild(DisplayObject(label));
				else 
					addChildAt(DisplayObject(label), childIndex);
			}
		}
		
		protected function removeLabel():void
		{
			if (label != null)
			{
				removeChild(DisplayObject(label));
				label = null;
			}
		}
		
		override protected function commitProperties():void
		{
			super.commitProperties();
			if(this.label)
			{
				if (data && column && column.width > 0)
				{
					if(data[SummaryBarConstant.SUB_TOTAL])
					{
						var summaryBarKey:String = data[SummaryBarConstant.SUMMARY_BAR_KEY];
						label.width = column.width;
						this.label.text = "";
						var originalText : String = '';
						var bkText : String ='';
						//get current summary bar
						var summaryBar : SummaryBar = listOwner.lstSummaryBar[data[SummaryBarConstant.SUMMARY_BAR_KEY]];
						if(summaryBar != null && column !=null)
						{
							//set label subtotal
							if (column.merge && column.dataField.toLowerCase() == data[SummaryBarConstant.SUMMARY_MERGE_COLUMN].toString().toLowerCase())
							{
								originalText = data[data[SummaryBarConstant.SUMMARY_MERGE_COLUMN]];
							}
							// fill data summary column
							else if(column.subToltalColumn)
							{
								if(summaryBar.functionList[column.dataField] == SummaryBarConstant.FUNC_CUSTOM)
								{
									if(column.type == ColumnType.NUMBER)
									{
										if(listOwner.summaryBarManager.isSubTotalCol(summaryBar,column))
										{
											originalText = listOwner.summaryBarManager.formatBaseOnPatternTotal(column,data[column.dataField],data);
										}
									}
									else
									{
										var currentIndexSubTotal : int = listOwner.summaryBarManager.getCurrentIndexofTotal(data[SummaryBarConstant.SUMMARY_BAR_KEY],listOwner.getItemIndex(data));
										if((column.positionTotalChange[data[SummaryBarConstant.SUMMARY_BAR_KEY] + '_' +column.dataField + '_' + currentIndexSubTotal ] != null)  && (summaryBar.functionList[column.dataField] == SummaryBarConstant.FUNC_CUSTOM))
										{
											if(isNaN(Number(column.positionTotalChange[data[SummaryBarConstant.SUMMARY_BAR_KEY] + '_' +column.dataField + '_' + currentIndexSubTotal]))) // data type is string --> no need calculating
												originalText = column.positionTotalChange[data[SummaryBarConstant.SUMMARY_BAR_KEY] + '_' +column.dataField + '_' + currentIndexSubTotal];
											else
											{
												if(column.formatType != null && column.formatType[data[SummaryBarConstant.SUMMARY_BAR_KEY]] != null)
													originalText = listOwner.summaryBarManager.formatBaseOnPatternTotal(column,column.positionTotalChange[data[SummaryBarConstant.SUMMARY_BAR_KEY] + '_' +column.dataField + '_' + currentIndexSubTotal],data);
												else
													originalText = column.positionTotalChange[data[SummaryBarConstant.SUMMARY_BAR_KEY] + '_' +column.dataField + '_' + currentIndexSubTotal];
											}
										}
										else
										{
											originalText ='';
										}
									}
								}
								else
								{
									if(column.type != ColumnType.NUMBER)
										data[column.dataField] = renderLabelFuncOfSummaryBar(data,column);
									if(listOwner.summaryBarManager.isSubTotalCol(summaryBar,column)) // if this is a summary bar column
									{
										if(isNaN(Number(data[column.dataField]))) // using for case of user set text is not number
											originalText = data[column.dataField];
										else
											originalText = listOwner.summaryBarManager.formatBaseOnPatternTotal(column,data[column.dataField],data);									
									}
								}
							}		
						}				
						if(originalText)
						{
							this.label.text = originalText;
						}
					}
					
					var dataTips:Boolean = listOwner.showDataTips;
					if (column.showDataTips == true)
						dataTips = true;
					if (column.showDataTips == false)
						dataTips = false;
					if (dataTips)
					{
						if (!(data is ExAdvancedDataGridColumn) && (label.textWidth > label.width
							|| column.dataTipFunction || column.dataTipField 
							|| listOwner.dataTipFunction || listOwner.dataTipField))
						{
							toolTip = column.itemToDataTip(data);
						}
						else
						{
							toolTip = null;
						}
					}
					else if (listOwner.toolTipData !="" && column.toolTipData !="")
					{
						toolTip = listOwner.toolTipData;
					}
					else
					{
						toolTip = null;
					}
				}
				else
				{
					label.text = " ";
					toolTip = null;
					label.width = 0;
				}				
			}
			invalidateDisplayList();
		}
		
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			var truncated:Boolean;
			truncated = label.truncateToFit();				
			
			if (!toolTipSet)
				super.toolTip = truncated ? this.label.text : null;
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
			
			this.label.move(0,0);
			var startX:Number = 0;
			if(this.listOwner && this.listOwner.nCellPadding)
			{
				startX += this.listOwner.nCellPadding;
			}
			
			var t:String = getMinimumText(label.text);
			var textFieldBounds:Rectangle = measureTextFieldBounds(t);
			label.height = textFieldBounds.height;
			label.setActualSize(unscaledWidth - startX, label.height);
			
			var textAlign:String = getStyle("textAlign");
			if (textAlign == "left")
			{
				label.x = startX;
			}
			else if (textAlign == "right")
			{
				label.x = unscaledWidth - startX - label.width + 2; // 2 for gutter
			}
			else
			{
				label.x = (unscaledWidth - label.width) / 2  - startX;
			}
			
			var verticalAlign:String = getStyle("verticalAlign");
			if (verticalAlign == "top")
			{
				label.y = 0;
			}
			else if (verticalAlign == "bottom")
			{
				label.y = unscaledHeight - label.height + 2; // 2 for gutter
			}
			else
			{
				label.y = (unscaledHeight - label.height) / 2;
			}
			
			drawStrikeThrough(this.label);
						
			//because some reason, this style is cleaned. We need to re-set it again.
			var styleValue:String = getSummaryBarCellStyle('textDecoration');
			this.setStyle('textDecoration',styleValue);
		}
		
		/******************************************************************************************
		 * Apply color of cell
		 * @author Duong Pham
		 ******************************************************************************************/
		override public function validateNow():void
		{
			super.validateNow();
			if (data && parent)
			{
				var newColor:Number = getCurentColor();
				var oldColor:* = label.textColor;
				if (oldColor != newColor)
				{
					label.setColor(newColor);
					invalidateDisplayList();
				}
			}
		}
		
		/******************************************************************************************
		 * Get accessibility name for screen reader
		 * @author Thuan
		 ******************************************************************************************/
		override public function getAccessibilityName():String
		{
			//return "Component is Subtotal. Value is " + this.label.text;
			
			var strReader:String = this.column.strAccessReader;
			
			if (strReader && strReader.length > 0) // Parse value in strAccessReader 
			{
				if (strReader.indexOf(Global.ACCESS_READER_CONTROLTYPE) > -1)
				{
					strReader = strReader.replace(Global.ACCESS_READER_CONTROLTYPE, Global.ACCESS_READER_SUBTOTAL);
					if (strReader.indexOf(Global.ACCESS_READER_CELLVALUE) > -1)
						strReader = strReader.replace(Global.ACCESS_READER_CELLVALUE, this.label.text);
				}
				else // don't have control type in strAccessReader
				{
					if (strReader.indexOf(Global.ACCESS_READER_CELLVALUE) > -1)
						strReader = strReader.replace(Global.ACCESS_READER_CELLVALUE, this.label.text);
				}
				//				trace("Label Renderer strReader != null: " + strReader);
			}
			else // make column default information
			{
				strReader = Global.ACCESS_READER_COLUMN_DEFAULT + " " + Global.ACCESS_READER_CONTROL + " " + 
					Global.ACCESS_READER_SUBTOTAL + " " + Global.ACCESS_READER_CELL + " " + this.label.text;
				//				trace("Label Renderer strReader == null: " + strReader);
			}
			return strReader;
		}
		
		/**************************************************************************
		 * verify cell is drawn strike through text or not
		 * @author Duong Pham 
		 **************************************************************************/
		override protected function isStrikeThroughText():Boolean
		{
			var summaryBarStyle : SummaryBarStyle = column.summaryBarStyle[data[SummaryBarConstant.SUMMARY_BAR_KEY]];
			if(summaryBarStyle && summaryBarStyle.subTotalFontCLine)
				_isStrikeThrough = summaryBarStyle.subTotalFontCLine;				
			else 	
				_isStrikeThrough = super.isStrikeThroughText();
			return _isStrikeThrough;
		}
		
		/*************************************************************
		 * function support label function of column Text type.
		 * It will support 2 cases
		 * - calculate in sub total
		 * - calculate in total
		 * @param item Object data
		 * @param column ExAdvancedDataGridColumn
		 * @author Duong Pham
		 * ***********************************************************/
		public function renderLabelFuncOfSummaryBar(item : Object, column:ExAdvancedDataGridColumn): String
		{
			var rs : String ="";
			//var value : Number = 0;
			var value : String=item[column.dataField];
			var count : int =0;
			if(column.subToltalColumn || column.totalColumn)
			{
				var currentSummaryBarKey : String;
				var currentSummaryBar : SummaryBar;
				var strFunc : String;
				var currentIndex : int = 0; 
				
				var typeSummarybar : String;
				if(item[SummaryBarConstant.SUB_TOTAL] != null)  // sub total row
				{
					currentSummaryBarKey = item[SummaryBarConstant.SUMMARY_BAR_KEY];
					currentIndex = listOwner.getItemIndex(item);
					var subTotalIndex : int = listOwner.summaryBarManager.getCurrentIndexofTotal(currentSummaryBarKey,currentIndex);
					currentSummaryBar =listOwner.lstSummaryBar[currentSummaryBarKey] as SummaryBar;
					typeSummarybar = currentSummaryBar.strFunction;
					if(currentSummaryBar.functionList[column.dataField] != null)
						strFunc = (currentSummaryBar.functionList[column.dataField]).toString().toLowerCase();
					
					if(column.positionTotalChange[currentSummaryBarKey + '_' +column.dataField + '_' + subTotalIndex] != null && typeSummarybar == 'custom')
					{
						value = column.positionTotalChange [currentSummaryBarKey + '_' + column.dataField + '_' +subTotalIndex].toString();
					}
					else
					{
						if(item[column.dataField] != null && isNaN(Number(item[column.dataField]))) // using for column that is label subtotal 
						{
							value =  item[column.dataField];
						}
						else
						{
							if(strFunc != SummaryBarConstant.FUNC_CUSTOM)
								value = listOwner.summaryBarManager.calculateSubTotal(strFunc,currentIndex,currentSummaryBarKey,column).toString();
							else
								value = '0';
						}
					}
					
				}				
				else // data row
				{
					//value = Number(item[column.dataField].toString());
					value = item[column.dataField].toString();
				}
				item[column.dataField] = value;
			}
			//			return this.datagrid.summaryBarManager.formatBaseOnPatternTotal(column,value,item);
			return value;
		}
	}
}