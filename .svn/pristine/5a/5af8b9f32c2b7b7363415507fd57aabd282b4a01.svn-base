////////////////////////////////////////////////////////////////////////////////
//
//  ACTSONE COMPANY
//  Copyright 2012 Actsone 
//  All Rights Reserved.
//
////////////////////////////////////////////////////////////////////////////////
package kr.co.actsone.itemRenderers
{
	import flash.display.DisplayObject;
	import flash.events.MouseEvent;
	import flash.geom.Point;
	import flash.geom.Rectangle;
	import flash.text.TextLineMetrics;
	
	import kr.co.actsone.common.Global;
	import kr.co.actsone.controls.ExAdvancedDataGrid;
	import kr.co.actsone.controls.advancedDataGridClasses.ExAdvancedDataGridColumn;
	import kr.co.actsone.controls.advancedDataGridClasses.ExAdvancedDataGridListData;
	import kr.co.actsone.summarybar.SummaryBarConstant;
	
	import mx.controls.listClasses.BaseListData;
	import mx.controls.listClasses.IDropInListItemRenderer;
	import mx.controls.listClasses.IListItemRenderer;
	import mx.core.IDataRenderer;
	import mx.core.IToolTip;
	import mx.core.IUITextField;
	import mx.core.UIComponent;
	import mx.core.UITextField;
	import mx.core.mx_internal;
	import mx.events.FlexEvent;
	import mx.events.ToolTipEvent;
	import mx.styles.StyleManager;
	
	use namespace mx_internal;
	
	[Event(name="dataChange", type="mx.events.FlexEvent")]
	
	public class ExUIComponent extends UIComponent implements IDataRenderer, IDropInListItemRenderer,IListItemRenderer
	{
		public var listOwner:ExAdvancedDataGrid;
		public var column:ExAdvancedDataGridColumn;
		private var _listData:ExAdvancedDataGridListData;
		private var _data:Object;
		public var toolTipSet:Boolean = false;
		
		public var strike:UIComponent = new UIComponent();
		public var _isStrikeThrough:Boolean;
		
		public function ExUIComponent()
		{
			super();
			tabEnabled = false;
			mouseEnabled = true;
			mouseChildren = true;
			mouseFocusEnabled = true;
			
			cancelAllCallLaters(); //chheavhun add for initialize performance
			
			addEventListener(ToolTipEvent.TOOL_TIP_SHOW, toolTipShowHandler);
		}
		
		/**************************************************************************
		 * The event handler to position the tooltip.
		 * @param event The event object.
		 * @author Duong Pham 
		 **************************************************************************/
		private function toolTipShowHandler(event:ToolTipEvent):void
		{            
			var toolTip:IToolTip = event.toolTip;
			var xPos:int = DisplayObject(systemManager).mouseX + 11;
			var yPos:int = DisplayObject(systemManager).mouseY + 22;
			// Calculate global position of label.
			var pt:Point = new Point(xPos, yPos);
			pt = DisplayObject(systemManager).localToGlobal(pt);
			pt = DisplayObject(systemManager.getSandboxRoot()).globalToLocal(pt);           
			
			toolTip.move(pt.x, pt.y + (height - toolTip.height) / 2);
			
			var screen:Rectangle = toolTip.screen;
			var screenRight:Number = screen.x + screen.width;
			if (toolTip.x + toolTip.width > screenRight)
				toolTip.move(screenRight - toolTip.width, toolTip.y);
		}
		
		/**************************************************************************
		 * set tooltip value
		 * @param value of tool tip
		 * @author Duong Pham 
		 **************************************************************************/
		override public function set toolTip(value:String):void
		{
			super.toolTip = value;
			
			toolTipSet = value != null;
		}
		
		[Bindable("dataChange")]
		public function get data():Object
		{
			return _data;
		}
		
		public function set data(value:Object):void
		{
			_data = value;
			
			invalidateProperties();
			
			dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
		}
		
		[Bindable("dataChange")]
		public function get listData():BaseListData
		{
			return _listData;
		}		

		/**************************************************************************
		 * get datagrid and column from list data
		 * @param value of list data
		 * @author Duong Pham 
		 **************************************************************************/
		public function set listData(value:BaseListData):void
		{
			_listData = ExAdvancedDataGridListData(value);
			if (listData)
			{
				listOwner=this.listData.owner as ExAdvancedDataGrid;	
				column=listOwner.columns[this.listData.columnIndex];	
			}
			invalidateProperties();
		}
		
		/**************************************************************************
		 * Get data field of column
		 * @author Duong Pham 
		 **************************************************************************/
		public function get dataField():String
		{
			if(this.listData == null)
				return null;
			return listOwner.columns[this.listData.columnIndex].dataField;
		}
		
		/**************************************************************************
		 * Get information of column such as: Header text and column type
		 * @param object need to be drawn strike through text
		 * @author Duong Pham 
		 **************************************************************************/
		public function drawStrikeThrough(label:*):void
		{
			_isStrikeThrough = isStrikeThroughText();
			if (_isStrikeThrough && label.text != "" && label)
			{
				if(!strike.parent)
					this.addChild(strike);
				this.strike.graphics.clear();
				this.strike.graphics.moveTo(0, 0);
				this.strike.graphics.lineStyle(1, this.getStyle("color"), 1);
				var align:String=this.getStyle("textAlign");
				var y:int=0;
				var x:int=0;
				if(align=="center")
				{
					x=this.width/2-label.textWidth/2-2;
					if(!isNaN(listOwner.nCellPadding))
						x += listOwner.nCellPadding;
				}
				else if(align=="right")
				{
					x=this.width-label.textWidth-2;
				}
				else
				{
					x = 2;
					if(!isNaN(listOwner.nCellPadding))
						x += listOwner.nCellPadding;
				}
				
				for (var i:int=0; i < label.numLines; i++)
				{
					var metrics:TextLineMetrics=label.getLineMetrics(i);
					if (i == 0)
					{
						y+=(metrics.ascent * 0.66) + 2;
					}
					else
					{
						y+=metrics.height;
					}
					this.strike.graphics.moveTo(x, y);
					this.strike.graphics.lineTo(x+metrics.width-1, y);
				}
			}
			else
			{
				if(strike.parent)
					this.removeChild(strike);
			}
		}
		
		/**************************************************************************
		 * verify cell is drawn strike through text or not
		 * @param rowIndex
		 * @author Duong Pham 
		 **************************************************************************/
		protected function isStrikeThroughText():Boolean
		{
			if(data == null || dataField == null)
				return false;
			var _isStrikeThrough:Boolean = false;
			if(listOwner.bCellFontCLine && column.bCellFontCLine)
				_isStrikeThrough = true;
			var fontCLine:String=listOwner.getCellProperty("fontCLine",data[Global.ACTSONE_INTERNAL],dataField);
			if (fontCLine != null && fontCLine.toString() == "true")
				_isStrikeThrough=true;
			return _isStrikeThrough;
		}

		/**************************************************************************
		 * apply color when roll over / selected item
		 * @author Duong Pham
		 **************************************************************************/
		public function applyColor(appObj:Object,currColor:*):void
		{
			if (listData && data)
			{
				var newColor:*=getCurentColor();
				if(newColor == null || newColor == undefined)
					newColor = currColor;				
				if(appObj is IUITextField)
				{
					appObj.setColor(newColor as uint);
				}
				else
					appObj.setStyle('color',newColor as uint);
			}	
		}
		
		protected function getCurentColor():*
		{
			var newColor:* = getStyle("color");;	
			var colIndex:int=listData.columnIndex;
			if(!listOwner.selectCell)
			{
				if (listOwner.isItemHighlighted(data))
				{
					newColor=listOwner.getStyle("textRollOverColor");
				}
				else if (listOwner.isItemSelected(data))
				{
					newColor=listOwner.getStyle("textSelectedColor");
				}
			}
			else
			{
				if(listOwner.isCellHighlighted(data,colIndex))
				{
					newColor=listOwner.getStyle("textRollOverColor");
				}
				else if (listOwner.isCellSelected(data,colIndex))
				{
					newColor=listOwner.getStyle("textSelectedColor");
				}
			}
			return newColor;
		}
		/**************************************************************************
		 * Get information of column such as: Header text and column type
		 * @author Thuan 
		 **************************************************************************/
		protected function getAccessibilityNameDefault():String
		{
			var colIndex: int = listData.columnIndex;
			var columnInfor: String = "";
			
			if ((this.owner as ExAdvancedDataGrid).columns[colIndex] && ((this.owner as ExAdvancedDataGrid).columns[colIndex].headerText))
				columnInfor = Global.ACCESS_READER_HEADER + " " + (this.owner as ExAdvancedDataGrid).columns[colIndex].headerText + ". ";
			
			columnInfor += Global.ACCESS_READER_COLUMN + this.column.type + ". ";
			
			return columnInfor;
		}
		
		/**************************************************************************
		 * Get name and value of control in cell
		 * @author Thuan 
		 **************************************************************************/
		public function getAccessibilityName():String
		{
			return "";	
		}
		
		/**************************************************************************
		 * Get full information of cell value: Header text, column type, control type, cell value
		 * @author Thuan 
		 **************************************************************************/
		public function getAccessibilityFullInfor():String
		{
			var strName: String = getAccessibilityName();
			var strNameDefault: String;
			var columnDefault: String = Global.ACCESS_READER_COLUMN_DEFAULT;
			
			if (strName.indexOf(columnDefault) > -1) // existed default string, use default name
			{
				strNameDefault = getAccessibilityNameDefault();
				//leave out Global.ACCESS_READER_COLUMN_DEFAULT in strName:
				strName = strName.substring(Global.ACCESS_READER_COLUMN_DEFAULT.length, strName.length - 1);
				strName = strNameDefault + strName;
				//trace("strAcc with default = " + strName);
			}
			else
			{
				//trace("ExUIComponent with no default .................. = " + strName);
			}
			return strName;
		}
		
		/**************************************************************************
		 * Get minimum of text
		 * @author Duong Pham 
		 **************************************************************************/
		public function getMinimumText(t:String):String
		{
			// If the text is null, empty, or a single character,
			// make the measured size big enough to hold
			// a capital and decending character using the current font.
			if (!t || t.length < 2)
				t = "Wj";
			
			return t;   
		}
		
		/**************************************************************************
		 * measure text include padding
		 * @author Duong Pham
		 **************************************************************************/
		public function measureTextFieldBounds(s:String):Rectangle
		{
			// Measure the text we need to display.
			var lineMetrics:TextLineMetrics = measureText(s);
			
			// In order to display this text completely,
			// a TextField must be 4-5 pixels larger.
			return new Rectangle(0, 0,
				lineMetrics.width + UITextField.TEXT_WIDTH_PADDING,
				lineMetrics.height + UITextField.TEXT_HEIGHT_PADDING);
		}
		
		/**************************************************************************
		 * apply cell background color
		 * @author Duong Pham
		 **************************************************************************/
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			super.updateDisplayList(unscaledWidth, unscaledHeight);
			
			cancelAllCallLaters();//chheavhun add for initialize performance
			
			
			applyCellBackGroundColor();
			
		}
		
		/**************************************************************************
		 * measure text include padding
		 * @author Duong Pham
		 **************************************************************************/
		public function applyCellBackGroundColor():void
		{
			if(data == null || dataField  == null)
				return;			
			//draw background of cell
			var color:String = this.listOwner.getCellProperty('backgroundColor',data[Global.ACTSONE_INTERNAL],dataField);
			if(color)
				drawBgColor(styleManager.getColorName(color));
			else
				graphics.clear();
		}
		
		/**************************************************************************
		 * draw background color of item renderer
		 * @author Duong Pham
		 **************************************************************************/
		private function drawBgColor(bgColor:*):void
		{
			if (listOwner && data)
			{
				var colIndex:int=listData.columnIndex;
				var sBgColor:*;
				if(!this.listOwner.selectCell)
				{
					if (listOwner.isItemSelected(data) || listOwner.isItemHighlighted(data))
					{
						setCellBackGroundColorHelper(0);
						return;
					}
					setCellBackGroundColorHelper(bgColor as uint);
				}
				else
				{		
					if (listOwner.isCellHighlighted(data,colIndex) || listOwner.isCellSelected(data,colIndex))
					{
						setCellBackGroundColorHelper(0);
						return;
					}
					setCellBackGroundColorHelper(bgColor as uint);
				}
			}
		}
		
		/**************************************************************************
		 * support to draw background color of item renderer
		 * @author Duong Pham
		 **************************************************************************/
		private function setCellBackGroundColorHelper(sColor:uint):void
		{		
			if(!this.listOwner)
				return;
			if(sColor == 0)
			{				
				graphics.clear();
				return;
			}
			if (styleManager.isValidStyleValue(sColor))
			{
				graphics.clear();			
				graphics.beginFill(sColor as uint,1);			
				if(unscaledHeight < this.listOwner.rowHeight)
					graphics.drawRect(0, -2, unscaledWidth, this.listOwner.rowHeight);
				else
					graphics.drawRect(0, -2, unscaledWidth, unscaledHeight);
				graphics.endFill();
			}
		}
		
		/**************************************************************************
		 * get specified style of summary bar
		 * @author Duong Pham
		 **************************************************************************/
		protected function getSummaryBarCellStyle(styleName:String):*
		{
			var styleValue:* = listOwner.getCellSummaryBarStyle(data[SummaryBarConstant.SUMMARY_BAR_KEY],dataField,styleName);
			if(styleValue == null || styleValue == undefined || styleValue == "")
				styleValue = listOwner.getRowSummaryBarStyle(data[SummaryBarConstant.SUMMARY_BAR_KEY],styleName);
			if((styleValue == null || styleValue == undefined || styleValue == "") && column.getStyle(styleName) != undefined)
				styleValue = column.getStyle(styleName);
			else if((styleValue == null || styleValue == undefined || styleValue == "") && listOwner.getStyle(styleName) != undefined)
				styleValue = listOwner.getStyle(styleName);
			return styleValue;
		}
	}
}